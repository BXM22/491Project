name: Django CI

on:
  push:
    branches: [ main, 'SCRUM-*' ]
  pull_request:
    branches: [ main, 'SCRUM-*' ]

# Add concurrency control to prevent multiple jobs from running simultaneously
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-docs
  cancel-in-progress: false

permissions:
  contents: write
  pull-requests: read

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_db
        ports: [5432:5432]
        options: >-
          --health-cmd="pg_isready -U postgres"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          ref: ${{ github.head_ref || github.ref_name }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.12

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r backend/requirements.txt
          pip install pytest pytest-django

      - name: Run migrations
        run: |
          cd backend
          python manage.py migrate
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

      - name: Run tests with JUnit output
        run: |
          cd backend
          pytest --junitxml=test_results.xml
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db

      - name: Append test results and bug tracking
        run: |
          cd backend
          TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")

          # Append test results
          python ../cicd_scripts/parse_test_results.py test_results.xml ../docs/test_results.md
          echo "\n# CI Run: $TIMESTAMP\n" >> ../docs/test_results.md

          # Append bug tracking
          python ../cicd_scripts/parse_test_failures.py test_results.xml ../docs/bugs.md
          echo "\n# CI Run: $TIMESTAMP\n" >> ../docs/bugs.md

      - name: Commit and push test docs (repo-only)
        if: github.repository_owner == 'NolanBrandon'
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Pull latest changes first to avoid conflicts
          git pull --rebase origin ${{ github.head_ref || github.ref_name }} || true
          
          git add docs/test_results.md docs/bugs.md
          git commit -m "Update test results and bug tracking from CI run" || echo "No changes to commit"
          
          # Retry push with backoff if it fails
          for i in {1..3}; do
            if git push https://x-access-token:${{ secrets.GH_PAT }}@github.com/${{ github.repository }} HEAD:${{ github.head_ref || github.ref_name }}; then
              echo "Successfully pushed on attempt $i"
              break
            else
              echo "Push failed on attempt $i, retrying..."
              git pull --rebase origin ${{ github.head_ref || github.ref_name }} || true
              sleep 5
            fi
          done

      - name: Skip push for forked PRs
        if: github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name != github.repository
        run: |
          echo "Skipping git push for forked PR – forks don’t have write access to this repo."

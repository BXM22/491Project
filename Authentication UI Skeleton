import React, { useState, useEffect } from 'react';
import { Eye, EyeOff, Mail, Lock, User, CheckCircle, XCircle, AlertCircle } from 'lucide-react';

const AuthContext = React.createContext();

const useAuth = () =>
{
    const context = React.useContext (AuthContext);
    if (!context)
    {
        throw new Error ('useAuth must be used within an AuthProvider');
    }
    return context;
};

// Auth Provider Component
const AuthProvider = ({ children }) => 
    {
        const [user, setUser] = useState(null);
        const [isLoading, setIsLoading] = useState(false);
        const [error, setError] = useState('');
        
        // Simulate API calls
        const login = async (email, password) =>
            {
                setIsLoading (true);
                setError ('');
                try
                {
                    //Simulate API call
                    await new Promise(resolve => setTimeout(resolve, 1000));
                    //Mock response
                    const mockUser =
                    {
                        id: 1,
                        username: 'fituser',
                        email: email,
                        isVerified: true,
                        loginStreak: 5
                    };
                    setUser (mockUser);
                    localStorage.setItem('authTokens', JSON.stringify ({accessToken: 'mock-access-token', refreshToken: 'mock-refresh-token'}));
                    
                    return { success: true };
                }
                catch (err)
                {
                    setError('Login failed. Please try again.');
                    return { success: false, error: err.message };
                }
                finally
                {
                    setIsLoading(false);
                }
            };

            const register = async (userData) =>
            {
                setIsLoading(true);
                setError ('')
                try
                {
                    //Simulate API call
                    await new Promise (resolve => setTimeout (resolve, 1000));
                    return
                    {
                        success: true,
                        message: 'Registration successful! Please check your email to verify your account.'
                    };
                }
                catch (err)
                {
                    setError ('Registration failed. Please try again.');
                    return { success: false, error: err.message };
                }
                finally
                {
                    setIsLoading(false);
                }
            };

            const logout = () => 
            {
                setUser (null);
                localStorage.removeItem('authToken');
            };

            const forgotPassword = async (email) =>
            {
                setIsLoading(true);
                setError('');
                try
                {
                    //Simulate API call
                    await new Promise (resolve => setTimeout(resolve, 1000));
                    return
                    {
                        success: true,
                        message: 'If an account with that email exists, a password reset link has been sent.'
                    };
                }
                catch (err)
                {
                    setError('Failed to send reset email. Please try again.');
                    return { success: false, error: err.message };
                }
                finally
                {
                    setIsLoading(false);
                }
            };

            const value =
            {
                user,
                isLoading,
                error,
                setError,
                login,
                register,
                logout,
                forgotPassword
            };

            return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;
        };

        //Input component with validation
        const FormInput = 
        ({
            type = 'text',
            placeholder,
            value,
            onChange,
            icon: Icon,
            error,
            success,
            showPasswordToggle = false,
            ...props
        }) =>
        {
            const [showPassword, setShowPassword] = useState(false);
            const inputType = showPasswordToggle ? (showPassword ? 'text' : 'password') : type;

            return
